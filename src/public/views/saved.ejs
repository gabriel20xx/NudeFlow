<%- include("partials/header") %>
<main id="saved-container" class="page-wrapper" aria-label="Saved media">
    <section id="savedVideos" class="results-grid" aria-live="polite"></section>
    <div id="savedOverlay" class="media-overlay" role="dialog" aria-modal="true" aria-label="Saved media viewer">
        <button class="nav-btn prev-btn" type="button" aria-label="Previous" onclick="showPrevSaved()">&#10094;</button>
        <div class="media-frame" id="savedFrame">
            <button class="close-btn" type="button" aria-label="Close" onclick="closeSavedOverlay()">✕</button>
        </div>
        <button class="nav-btn next-btn" type="button" aria-label="Next" onclick="showNextSaved()">&#10095;</button>
    </div>
</main>

    <script>
        const SAVED_STORE_KEY = 'nf_savedMedia_v1';
    // Guard to prevent accidental opens right after a removal re-renders the list
    window._suppressSavedOpenUntil = 0;

        function getSavedList(){
            try { const raw = localStorage.getItem(SAVED_STORE_KEY); const arr = raw ? JSON.parse(raw) : []; return Array.isArray(arr)?arr:[]; } catch { return []; }
        }
    function canonicalizeUrl(u){ try { const url=new URL(u, window.location?.origin||location?.origin||undefined); return (url.origin+url.pathname).toLowerCase(); } catch { return (u||'').toLowerCase(); } }
    function savedKey(id,url){ if(id!=null && String(id).trim()!=='') return 'id:'+String(id); if(url) return 'url:'+canonicalizeUrl(url); return null; }
    function dedupeSaved(list){ const seen=new Set(); const out=[]; for(const x of Array.isArray(list)?list:[]){ const key = savedKey(x?.id,x?.url) || JSON.stringify(x); if(!seen.has(key)){ seen.add(key); out.push(x);} } return out; }
    function saveSavedList(list){ try { localStorage.setItem(SAVED_STORE_KEY, JSON.stringify(dedupeSaved(list))); } catch{} }
    function removeSaved(id){
        const current = getSavedList();
        const removedItem = current.find(x => x.id === id);
        const next = current.filter(x=>x.id!==id);
        saveSavedList(next);
        const overlayEl = document.getElementById('savedOverlay');
        const overlayOpen = !!(overlayEl && overlayEl.classList.contains('open'));
        renderSaved();
        // Toast notification for deletion (defer until DOM updated)
        try {
            const name = removedItem && (removedItem.name || removedItem.title);
            const msg = name ? `Removed “${name}” from Saved` : 'Removed from Saved';
            if (window.toast && typeof window.toast.success === 'function') {
                window.toast.success(msg, { duration: 2000, title: 'Saved' });
            }
        } catch {}
        if(overlayOpen){
            const list = getSavedList();
            if(typeof window._currentSavedIndex !== 'number' || window._currentSavedIndex < 0){
                window._currentSavedIndex = 0;
            }
            if(window._currentSavedIndex >= list.length){
                window._currentSavedIndex = list.length - 1;
            }
            if(list.length === 0){
                closeSavedOverlay();
            } else {
                renderOverlayFromIndex();
            }
        } else {
            // Ensure we don't treat overlay as active when it's not open
            window._currentSavedIndex = -1;
        }
    }
    function removeSavedClick(ev, id){
        try{
            ev?.stopPropagation();
            ev?.stopImmediatePropagation?.();
            ev?.preventDefault();
        }catch{}
        // Briefly suppress any open actions triggered by DOM reflow after removal
        window._suppressSavedOpenUntil = Date.now() + 500;
        removeSaved(id);
    }

        // Overlay navigation state
        window._currentSavedIndex = -1;
        function openSavedByIndex(i){
            if(Date.now() < (window._suppressSavedOpenUntil || 0)) return;
            const list=getSavedList(); if(!list.length) return;
            window._currentSavedIndex = Math.max(0, Math.min(i, list.length-1));
            renderOverlayFromIndex();
        }
        function renderOverlayFromIndex(){
            const list = getSavedList();
            const idx = window._currentSavedIndex;
            if(!list.length || idx<0 || idx>=list.length){ closeSavedOverlay(); return; }
            const item = list[idx];
            const overlay = document.getElementById('savedOverlay');
            const frame = document.getElementById('savedFrame');
            // remove previous media nodes
            Array.from(frame.querySelectorAll('img,video')).forEach(n=>n.remove());
            let node;
            if(item.mediaType==="static" || /\.(png|jpe?g|gif|webp|bmp|svg)$/i.test(item.url)){
                node = document.createElement('img');
                node.src = item.url;
                node.alt = item.name || 'Saved media';
            } else {
                node = document.createElement('video');
                node.src = item.url;
                node.controls = true;
                node.autoplay = true;
                node.loop = true;
                node.muted = false;
                node.playsInline = true;
            }
            frame.appendChild(node);
            overlay.classList.add('open');
            // Prevent background scroll while overlay is open
            try { document.body.classList.add('no-scroll'); document.documentElement.classList.add('no-scroll'); } catch{}
            // update nav button disabled state
            const prev = overlay.querySelector('.prev-btn');
            const next = overlay.querySelector('.next-btn');
            if(prev) prev.disabled = (idx<=0);
            if(next) next.disabled = (idx>=list.length-1);
        }
        function showPrevSaved(){ if(typeof window._currentSavedIndex!=='number') return; if(window._currentSavedIndex>0){ window._currentSavedIndex--; renderOverlayFromIndex(); } }
        function showNextSaved(){ const list=getSavedList(); if(typeof window._currentSavedIndex!=='number') return; if(window._currentSavedIndex<list.length-1){ window._currentSavedIndex++; renderOverlayFromIndex(); } }
        function closeSavedOverlay(){
            const overlay = document.getElementById('savedOverlay');
            const frame = document.getElementById('savedFrame');
            const vid = frame.querySelector('video');
            if(vid){ try{ vid.pause(); }catch{} }
            overlay.classList.remove('open');
            // Restore background scroll
            try { document.body.classList.remove('no-scroll'); document.documentElement.classList.remove('no-scroll'); } catch{}
        }

        function renderSaved(){
            const data = getSavedList();
            const container = document.getElementById('savedVideos');
            container.innerHTML = '';
            if(!data.length){ container.innerHTML = '<p>No saved videos yet.</p>'; return; }
            data.forEach((video, i) => {
                const el = document.createElement('div');
                el.className = 'video-item';
                el.innerHTML = `
                    <div class="video-thumbnail media-contain" role="button" tabindex="0" aria-label="Open ${video.name||'media'}" onclick='openSavedByIndex(${i})' onkeypress='if(event.key==="Enter"){openSavedByIndex(${i})}'>
                        <img src="${video.thumbnail || video.url}" alt="${video.name}">
                    </div>
                    <div>
                        <button type="button" class="btn-download" onclick="downloadSavedClick(event, '${video.id}')">Download</button>
                        <button type="button" class="btn-danger-solid" onclick="removeSavedClick(event, '${video.id}')">Remove</button>
                    </div>
                `;
                container.appendChild(el);
            });
        }

        renderSaved();
        function downloadSavedClick(ev, id){
            try{ ev?.stopPropagation(); ev?.preventDefault(); }catch{}
            const list = getSavedList();
            const item = list.find(x=>String(x.id)===String(id));
            if(!item || !item.url) return;
            const nameFromMeta = (item.name || item.title || '').trim();
            const urlName = (()=>{ try{ const u=new URL(item.url, location.origin); const p=u.pathname.split('/').filter(Boolean).pop()||'download'; return p; }catch{ return 'download'; }})();
            const filename = nameFromMeta ? `${nameFromMeta}` : urlName;
            downloadFile(item.url, filename);
        }
        function downloadFile(url, filename){
            try{
                fetch(url, {mode:'cors'}).then(r=>{
                    if(!r.ok) throw new Error('net');
                    return r.blob();
                }).then(blob=>{
                    const a=document.createElement('a');
                    const href=URL.createObjectURL(blob);
                    a.href=href; a.download=filename||'download';
                    document.body.appendChild(a); a.click(); a.remove();
                    setTimeout(()=>URL.revokeObjectURL(href), 1500);
                }).catch(()=>{
                    const a=document.createElement('a');
                    a.href=url; a.download=filename||''; a.target='_blank'; a.rel='noopener';
                    document.body.appendChild(a); a.click(); a.remove();
                });
            }catch{
                const a=document.createElement('a');
                a.href=url; a.download=filename||''; a.target='_blank'; a.rel='noopener';
                document.body.appendChild(a); a.click(); a.remove();
            }
        }
    </script>
<%- include("partials/navbar") %>
