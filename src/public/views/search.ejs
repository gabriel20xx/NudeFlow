<%- include("partials/header") %>
<main id="search-container" class="page-wrapper" aria-label="Search media">
    <h1 class="page-title">Search</h1>
    <div class="search-bar">
        <input type="text" id="searchInput" placeholder="Search media..." aria-label="Search query" autocomplete="off" />
        <button type="button" onclick="searchVideos()">Search</button>
    </div>
    <section id="searchResults" class="results-grid" aria-live="polite" aria-label="Search results"></section>
</main>
<script>
        async function searchVideos() {
            try {
                const query = document.getElementById('searchInput').value;
                if (!query.trim()) {
                    document.getElementById('searchResults').innerHTML = '<p>Please enter a search query.</p>';
                    return;
                }

                const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
                const apiResponse = await response.json();

                const resultsContainer = document.getElementById('searchResults');
                resultsContainer.innerHTML = '';

                if (!apiResponse.success || !apiResponse.data || apiResponse.data.length === 0) {
                    resultsContainer.innerHTML = '<p>No results found.</p>';
                    return;
                }

                                apiResponse.data.forEach(video => {
                                    const videoElement = document.createElement('article');
                                    videoElement.classList.add('video-item');
                                    videoElement.innerHTML = `
                                        <div class="video-thumbnail" role="button" tabindex="0" aria-label="Open ${video.name}" onclick="playVideo('${video.url}')" onkeypress="if(event.key==='Enter'){playVideo('${video.url}')}" >
                                            <img src="${video.thumbnail || video.url}" alt="${video.name}">
                                        </div>
                                        <p title="${video.name}">${video.name}</p>
                                        <small class="search-tags" data-media-key="${video.media_key||video.name}">Tags: <em>loading…</em></small>
                                    `;
                                    resultsContainer.appendChild(videoElement);
                                });
            } catch (error) {
                console.error('Search error:', error);
                document.getElementById('searchResults').innerHTML = '<p>Error occurred while searching. Please try again.</p>';
            }
        }

        function playVideo(videoUrl) {
            window.location.href = `/?video=${encodeURIComponent(videoUrl)}`;
        }

        // Allow search on Enter key
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchVideos();
            }
        });
        // Observe added tag placeholders & resolve tags asynchronously
        (function(){
            try {
                var results = document.getElementById('searchResults');
                if(!results) return;
                var tagObserver = new MutationObserver(function(muts){
                    muts.forEach(function(m){
                        Array.from(m.addedNodes||[]).forEach(function(n){
                            if(!(n instanceof HTMLElement)) return;
                            var placeholders = (n.matches && n.matches('.search-tags')) ? [n] : Array.from(n.querySelectorAll ? n.querySelectorAll('.search-tags') : []);
                            placeholders.forEach(function(ph){
                                var key = ph.getAttribute('data-media-key');
                                if(!key){ ph.innerHTML = 'Tags: <em>none</em>'; return; }
                                fetch('/api/media/' + encodeURIComponent(key) + '/tags')
                                    .then(function(r){ return r.json(); })
                                    .then(function(js){
                                        if(js && Array.isArray(js.tags) && js.tags.length){
                                            ph.textContent = 'Tags: ' + js.tags.slice(0,6).map(function(t){ return t.tag; }).join(', ');
                                        } else {
                                            ph.textContent = 'Tags: —';
                                        }
                                    })
                                    .catch(function(){ ph.textContent = 'Tags: —'; });
                            });
                        });
                    });
                });
                tagObserver.observe(results, { childList:true, subtree:true });
            } catch(e) { /* silent */ }
        })();
    </script>
<%- include("partials/navbar") %>
